---
- name: Install Docker, Docker Compose, Node.js, and Yarn
  hosts: all
  become: yes

  tasks:
    # Update the package manager
    - name: Update apt package index
      apt:
        update_cache: yes
      when: ansible_facts['pkg_mgr'] == 'apt'

    # Copy the Docker installation script to the VM
    - name: Copy Docker installation script
      copy:
        src: docker_install.sh
        dest: /tmp/docker_install.sh
        mode: '0755'

    # Run the Docker installation script
    - name: Run Docker installation script
      command: /tmp/docker_install.sh
      args:
        creates: /usr/bin/docker

    # Check if Node.js is installed
    - name: Check if Node.js is installed
      command: node --version
      register: node_check
      ignore_errors: yes

    # Add NodeSource repository for LTS version
    - name: Add NodeSource repository for LTS version
      shell: curl -fsSL https://deb.nodesource.com/setup_lts.x | bash -
      when: node_check.rc != 0

    # Install Node.js and npm
    - name: Install Node.js and npm
      apt:
        name: 
          - nodejs
        state: present
      when: node_check.rc != 0

    # Remove existing Yarn installation
    - name: Remove existing Yarn installation
      file:
        path: /usr/bin/yarn
        state: absent

    # Install Yarn globally
    - name: Install & Update Yarn
      shell: npm install -g yarn

    # Verify Docker installation
    - name: Verify Docker installation
      command: docker --version
      register: docker_version
      when: docker_version is not defined
    - debug:
        msg: "Docker version: {{ docker_version.stdout }}"

    # Verify Docker Compose installation
    - name: Verify Docker Compose installation
      command: docker compose version
      register: docker_compose_version
      when: docker_compose_version is not defined
    - debug:
        msg: "Docker Compose version: {{ docker_compose_version.stdout }}"

    # Verify Node.js installation
    - name: Verify Node.js installation
      command: node --version
      register: node_version
      when: node_version is not defined
    - debug:
        msg: "Node.js version: {{ node_version.stdout }}"

    # Verify npm installation
    - name: Verify npm installation
      command: npm --version
      register: npm_version
      when: npm_version is not defined
    - debug:
        msg: "npm version: {{ npm_version.stdout }}"

    # Verify Yarn installation
    - name: Verify Yarn installation
      command: yarn --version
      register: yarn_version
    - debug:
        msg: "Yarn version: {{ yarn_version.stdout }}"

    - name: Remove existing application directory
      file:
        path: "/home/vagrant/app"
        state: absent

    - name: Clone from GitHub project application code to ~/app
      git:
        repo: "https://{{ lookup('env', 'GITHUB_TOKEN') }}@github.com/vijaygone/django-react-ecommerce.git"
        dest: "/home/vagrant/app"
        version: "master"  # Replace with the desired branch or tag

    - name: Ensure vagrant user owns the app directory
      file:
        path: "/home/vagrant/app"
        state: directory
        owner: vagrant
        group: vagrant
        recurse: yes

    # Remove existing node_modules directory
    - name: Remove existing node_modules directory
      file:
        path: "/home/vagrant/app/node_modules"
        state: absent

    # Set Yarn network timeout configuration
    - name: Set Yarn network timeout
      command: yarn config set network-timeout 600000
      become: yes
      become_user: vagrant

    # Set Yarn registry configuration
    - name: Set Yarn registry to npmjs.org
      command: yarn config set registry https://registry.npmjs.org/
      become: yes
      become_user: vagrant

    # Install application dependencies using Yarn
    - name: Install application dependencies using Yarn
      command: yarn install --production
      args:
        chdir: /home/vagrant/app
      become: yes
      become_user: vagrant

    # Build the application using Yarn
    - name: Build the application
      command: yarn build
      args:
        chdir: /home/vagrant/app
      environment:
        NODE_OPTIONS: "--openssl-legacy-provider"
      become: yes
      become_user: vagrant

    # Stop existing Docker Compose services
    - name: Stop existing Docker Compose services
      command: docker compose down
      args:
        chdir: /home/vagrant/app
      ignore_errors: yes
      become: yes

    # Run Docker Compose to start the services
    - name: Start services using Docker Compose
      command: docker compose up -d
      args:
        chdir: /home/vagrant/app
      become: yes